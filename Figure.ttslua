jotl_Class = 'figure'

conditionPositioning = {
    ['Disarm'] = {angle = 0, adjustmentDistance = 0.15, rotation = vector(90, 300, 0)},
    ['Stun'] = {angle = 341, adjustmentDistance = 0.38, rotation = vector(90, 325, 0)},
    ['Immobilize'] = {angle = 339, adjustmentDistance = 0.05, rotation = vector(90, 325, 0)},
    ['Wound'] = {angle = 275, adjustmentDistance = 0.2, rotation = vector(90, 0, 0)},
    ['Poison'] = {angle = 292, adjustmentDistance = 0, rotation = vector(90, 350, 0)},
    ['Muddle'] = {angle = 235, adjustmentDistance = 0.35, rotation = vector(90, 35, 0)},
    ['Strengthen'] = {angle = 225, adjustmentDistance = 0.05, rotation = vector(90, 35, 0)},
    ['Invisible'] = {angle = 180, adjustmentDistance = 0.15, rotation = vector(90, 55, 0)},
}

function registerCondition(conditionToken)
    if Global.getVar('checkAllowConditionAttach') ~= nil then
        if not Global.call('checkAllowConditionAttach') then
            return false
        end
    end
    ensureConditionTableExists()

    local guid = conditionToken.getGUID()
    if saveState['conditions'][guid] ~= nil then
        return false
    end

    local conditionName = conditionToken.getName()
    if hasCondition(conditionName) then
        return false
    end

    conditionToken.call('move', {figure = self, baseDistance = baseConditionDistance})

    saveState['conditions'][guid] = conditionName
    self.script_state = JSON.encode(saveState)
    return true
end

function hasCondition(conditionName)
    -- If shield has tokens, return false for shield
    for guid, name in pairs(saveState['conditions']) do
        if name == conditionName then
            return true
        end
    end
    return false
end

function removeCondition(guid)
    saveState['conditions'][guid] = nil
    self.script_state = JSON.encode(saveState)
end

function clearConditions()
    if saveState['conditions'] ~= nil then
        for guid, name in pairs(saveState['conditions']) do
            local token = getObjectFromGUID(guid)
            if token ~= nil then
                token.destruct()
            end
        end
        saveState['conditions'] = nil
    end
end

function onPickUp()
    moveConditions = true
    updateConditionPositions()
end

function onDrop()
    Wait.frames(function() moveConditions = false end, 10)
end

function updateConditionPositions()
    if moveConditions and saveState['conditions'] ~= nil then
        for guid, name in pairs(saveState['conditions']) do
            local token = getObjectFromGUID(guid)
            if token ~= nil then
                token.call('move', {figure = self, baseDistance = baseConditionDistance})
            end
        end
        Wait.frames(updateConditionPositions, 1)
    end
end

function ensureConditionTableExists()
    if saveState['conditions'] == nil then
        saveState['conditions'] = {}
    end
end
