saveState = {}

function onLoad(save_state)
    if save_state ~= '' then
        saveState = JSON.decode(save_state)
    end
end

function onCollisionEnter(collision_info)
    if checkAttach(collision_info['collision_object']) then
        self.unregisterCollisions()
        saveState['figureGuid'] = collision_info['collision_object'].getGUID()
        self.script_state = JSON.encode(saveState)
    end
end

function checkAttach(object)
    return object.getVar('jotl_Class') == 'figure'
        and saveState['figureGuid'] == nil
        and object.call('registerCondition', self)
end

function onPickUp()
    local figure = getObjectFromGUID(saveState['figureGuid'])
    if figure ~= nil then
        saveState['figureGuid'] = nil
        self.script_state = JSON.encode(saveState)
        figure.call('removeCondition', self.getGUID())
        self.registerCollisions()
    end
end

function updateFigure(guid) -- used when replacing figure
    saveState['figureGuid'] = guid
    self.script_state = JSON.encode(saveState)
    self.unregisterCollisions()
end

function move(params)
    local figure = params.figure
    local baseDistance = params.baseDistance
    self.setPositionSmooth(calculatePosition(figure, baseDistance), false, true)
    self.setRotationSmooth(conditionRotation, false, true)
end

function calculatePosition(figure, baseDistance)
    local offset = vector(
        math.cos(math.rad(conditionAngle)) * (baseDistance + conditionDistanceAdjustment),
        0.4,
        math.sin(math.rad(conditionAngle)) * (baseDistance + conditionDistanceAdjustment)
    )
    return figure.getPosition() + offset
end
