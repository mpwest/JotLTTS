saveState = {}
option = 'Off'

function onLoad(save_state)
    if save_state ~= '' then
        saveState = JSON.decode(save_state)
    end
    setFollowOption()
end

function onCollisionEnter(collision_info)
    if checkAttach(collision_info['collision_object']) then
        self.unregisterCollisions()
        saveState['figureGuid'] = collision_info['collision_object'].getGUID()
        self.script_state = JSON.encode(saveState)
    end
end

function checkAttach(object)
    return object.getVar('jotl_Class') == 'figure'
        and saveState['figureGuid'] == nil
        and setFollowOption()
        and object.call('registerCondition', self)
end

function setFollowOption()
    option = Global.call('checkConditionAttachOption')
    return option ~= 'Off'
end

function onPickUp()
    option = 'Off'
    saveState['figureGuid'] = nil
    self.script_state = JSON.encode(saveState)
    self.registerCollisions()

    local figure = getObjectFromGUID(saveState['figureGuid'])
    if figure ~= nil then
        figure.call('removeCondition', self.getGUID())
    end
end

function updateFigure(guid) -- used when replacing figure
    saveState['figureGuid'] = guid
    self.script_state = JSON.encode(saveState)
    self.unregisterCollisions()
end

function move(params)
    local figure = params.figure
    local baseDistance = params.baseDistance

    if(option == 'Top') then
        self.setPositionSmooth(calculatePosition(figure, baseDistance, false), false, true)
        self.setRotationSmooth(conditionRotationTop, false, true)
    elseif(option == 'Iso') then
        self.setPositionSmooth(calculatePosition(figure, baseDistance, true), false, true)
        self.setRotationSmooth(conditionRotationIso, false, true)
    end
end

function calculatePosition(figure, baseDistance, iso)
    local adjustment = conditionDistanceAdjustmentTop
    local angle = conditionAngleTop

    if iso then
        adjustment = conditionDistanceAdjustmentIso
        angle = conditionAngleIso
    end

    local offset = vector(
        math.cos(math.rad(angle)) * (baseDistance + adjustment),
        0.4,
        math.sin(math.rad(angle)) * (baseDistance + adjustment)
    )
    return figure.getPosition() + offset
end
